import os
import sys
import time
import json
import gzip
import logging
import datetime
import requests
import xml.etree.ElementTree as ET
from typing import List, Dict, Optional

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler("main.log", encoding="utf-8"),
        logging.StreamHandler(sys.stdout)
    ]
)

# üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è XML-—Ñ—ñ–¥—É
def load_feed(feed_id: int) -> Optional[ET.Element]:
    url = f"https://api.dropshipping.ua/api/feeds/{feed_id}.xml"
    headers = {"User-Agent": "Mozilla/5.0 (compatible; CopilotBot/1.0)"}
    logging.info(f"üì• –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é: {url}")
    try:
        response = requests.get(url, headers=headers, timeout=30)
        if response.status_code != 200:
            logging.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {response.status_code}")
            return None
    except requests.RequestException as e:
        logging.error(f"‚ùå –ó–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–≤—Å—è: {e}")
        return None

    filename = f"raw_feed_{feed_id}.xml"
    with open(filename, "wb") as f:
        f.write(response.content)
    logging.info(f"üíæ –§—ñ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª: {filename}")

    return ET.fromstring(response.content)

# üì§ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –∑–±—ñ—Ä –≤–∞–ª—ñ–¥–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
def collect_all_valid_items(feed_ids: List[int]) -> List[Dict[str, str]]:
    all_items = []
    for feed_id in feed_ids:
        logging.info(f"üöÄ –û–±—Ä–æ–±–ª—è—é —Ñ—ñ–¥ {feed_id}")
        root = load_feed(feed_id)
        if root is None:
            continue

        offers = root.findall(".//offer")
        logging.info(f"‚Üí –ó–Ω–∞–π–¥–µ–Ω–æ {len(offers)} —Ç–æ–≤–∞—Ä—ñ–≤ —É —Ñ—ñ–¥—ñ {feed_id}")

        for offer in offers:
            item = {
                "id": offer.findtext("id", "").strip(),
                "name": offer.findtext("name", "").strip(),
                "price": offer.findtext("price", "").strip(),
                "quantity": offer.findtext("quantity", "0").strip(),
                "categoryId": offer.findtext("categoryId", "").strip(),
                "image": offer.findtext("image", "").strip()
            }

            # üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è
            if not item["id"]:
                logging.warning("‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ–º–∞—î ID")
                continue
            if not item["name"]:
                logging.warning(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ–º–∞—î –Ω–∞–∑–≤–∏ (ID: {item['id']})")
                continue
            try:
                price = float(item["price"])
                if price < 0.01 or price > 99999999999999:
                    logging.warning(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Ü—ñ–Ω–∞ {price} (ID: {item['id']})")
                    continue
            except ValueError:
                logging.warning(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: —Ü—ñ–Ω–∞ –Ω–µ —á–∏—Å–ª–æ '{item['price']}' (ID: {item['id']})")
                continue
            if not item["categoryId"]:
                logging.warning(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ–º–∞—î categoryId (ID: {item['id']})")
                continue

            all_items.append(item)

    logging.info(f"‚úÖ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∞–ª—ñ–¥–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: {len(all_items)}")
    return all_items

# üß± –ü–æ–±—É–¥–æ–≤–∞ XML-—Ñ—ñ–¥—É —É —Ñ–æ—Ä–º–∞—Ç—ñ Prom.ua
def build_prom_xml(offers: List[Dict[str, str]]) -> ET.ElementTree:
    root = ET.Element("offers")
    for offer in offers:
        item = ET.SubElement(root, "offer")
        ET.SubElement(item, "id").text = offer["id"]
        ET.SubElement(item, "name").text = offer["name"]
        ET.SubElement(item, "price").text = offer["price"]
        ET.SubElement(item, "quantity").text = offer["quantity"]
        ET.SubElement(item, "categoryId").text = offer["categoryId"]
        ET.SubElement(item, "image").text = offer["image"]
    return ET.ElementTree(root)

# üóúÔ∏è –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É .xml.gz
def save_gzipped_xml(tree: ET.ElementTree, filename: str) -> None:
    xml_bytes = ET.tostring(tree.getroot(), encoding="utf-8")
    with gzip.open(filename, "wb") as f:
        f.write(xml_bytes)

# üì§ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
def update_all_outputs(feed_ids: List[int], output_files: List[str]) -> None:
    items = collect_all_valid_items(feed_ids)
    tree = build_prom_xml(items)
    for filename in output_files:
        save_gzipped_xml(tree, filename)
        logging.info(f"üì¶ –§–∞–π–ª –æ–Ω–æ–≤–ª–µ–Ω–æ: {filename}")

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫–∞—é main.py...")
    FEED_IDS = [1849, 1850, 1851, 1852]
    OUTPUT_FILES = ["b2b.prom.1.xml.gz", "b2b.prom.2.xml.gz"]
    update_all_outputs(FEED_IDS, OUTPUT_FILES)
